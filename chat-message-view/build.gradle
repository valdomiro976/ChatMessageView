apply plugin: 'com.android.library'
apply plugin: 'maven-publish' // Essencial para publicação

// --- Configurações Android ---
android {
    // API de compilação para Android 14
    compileSdkVersion 34

    // Namespace do seu módulo (obrigatório para AGP 7.0+ e 8.0+)
    namespace 'me.himanshusoni.chatmessageview'

    defaultConfig {
        minSdkVersion 15 // Versão mínima suportada
        targetSdkVersion 34 // API alvo, alinhada com compileSdkVersion
        versionCode 7
        versionName "1.0.7" // Nome da versão da sua biblioteca
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Desabilita abortar o build em caso de warnings do Lint
    lintOptions {
        abortOnError false
    }

    // REMOVEMOS AQUI O BLOCO 'publishing {}' que estava dentro do 'android {}'
    // Pois ele será definido abaixo de forma mais explícita para o JitPack.
}

// --- Dependências do Módulo ---
dependencies {
    // Inclui todos os arquivos .jar da pasta 'libs'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Dependências da Support Library (última versão antes do AndroidX)
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
}

// --- Configuração de Publicação com 'maven-publish' ---
// Este bloco deve estar FORA do bloco 'android {}'
// Ele é executado após a avaliação do projeto, garantindo que o AAR seja gerado.
afterEvaluate {
    // Define o groupId e artifactId que o JitPack usará para sua biblioteca
    group = 'com.github.valdomiro976' // Seu nome de usuário do GitHub
    // project.version será automaticamente a tag do JitPack

    publishing {
        publications {
            release(MavenPublication) {
                groupId = project.group
                artifactId = 'chat-message-view' // Nome do seu módulo da biblioteca
                version = project.version // A versão será definida pela tag do JitPack

                // ANEXA DIRETAMENTE O ARQUIVO AAR GERADO
                // Esta é a forma mais robusta de obter o arquivo AAR de saída para publicação.
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar") {
                    builtBy tasks.bundleReleaseAar // Garante que a tarefa de build do AAR seja executada primeiro
                }

                // Anexar o sources JAR e javadoc JAR
                // As tarefas sourcesJar e javadocJar precisam estar definidas para isso funcionar.
                if (tasks.findByName('sourcesJar')) {
                    artifact tasks.sourcesJar
                }
                if (tasks.findByName('javadocJar')) {
                    artifact tasks.javadocJar
                }
            }
        }
    }
}

// --- Tarefas para Gerar Sources e Javadoc JARs (necessárias para 'artifact tasks.sourcesJar/javadocJar') ---
// Estas tarefas criam os JARs de código-fonte e documentação para serem publicados.
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption('Xdoclint:none', '-quiet') // Suprime warnings de Javadoc
    options.addStringOption('encoding', 'UTF-8')
    failOnError false // Não falha o build por erros de Javadoc
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

// --- Define os artefatos a serem incluídos na publicação (além do AAR principal) ---
// Isso informa ao Gradle que sourcesJar e javadocJar são artefatos do projeto.
artifacts {
    archives sourcesJar, javadocJar
}
